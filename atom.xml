<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[玉桂芳香]]></title>
  <subtitle><![CDATA[糖分很重要哈!!!]]></subtitle>
  <link href="/my-blog/atom.xml" rel="self"/>
  <link href="http://gin280.github.io/my-blog/my-blog//"/>
  <updated>2015-08-09T00:15:57.311Z</updated>
  <id>http://gin280.github.io/my-blog/my-blog//</id>
  
  <author>
    <name><![CDATA[Guo QI]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在sass中用breakpoint写media query]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2015/01/28/%E5%9C%A8sass%E4%B8%AD%E7%94%A8breakpoint%E5%86%99media%20query/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2015/01/28/在sass中用breakpoint写media query/</id>
    <published>2015-01-28T03:14:42.000Z</published>
    <updated>2015-08-09T00:15:57.311Z</updated>
    <content type="html"><![CDATA[<h2 id="先设置好变量，以后好改">先设置好变量，以后好改</h2><p>// assume min-width (by default) if only a number</p>
<pre><code><span class="variable">$high-tide</span><span class="value">: <span class="number">500px</span>;</span>
</code></pre><p>// set min-width/max-width if both values are numbers</p>
<pre><code><span class="variable">$ex-presidents</span><span class="value">: <span class="number">600px</span> <span class="number">800px</span>;</span>
</code></pre><p>// if one value is a string, assume a feature/value pair</p>
<pre><code>$surfboard-<span class="variable">width</span>: <span class="built_in">max</span>-<span class="variable">width</span> <span class="number">1000</span>px;
</code></pre><h2 id="在sass中可以这样写">在sass中可以这样写</h2><p>scss：</p>
<pre><code><span class="class">.my-style</span> {
 <span class="variable">@include</span> <span class="function">breakpoint</span>($high-tide) {
   <span class="attribute">content</span>: <span class="string">'High tide'</span>;
 }
</code></pre><p>   }</p>
<p>css:</p>
<p>   @media (min-width: 500px) {<br>     .reagan {<br>       content: ‘High tide’;<br>     }<br>   }</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="先设置好变量，以后好改">先设置好变量，以后好改</h2><p>// assume min-width (by default) if only a number</p>
<pre><code><span class="variable">$high-tide</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[一张图搞定浏览器兼容性问题]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2015/01/23/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%90%9E%E5%AE%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2015/01/23/一张图搞定浏览器兼容性问题/</id>
    <published>2015-01-23T06:11:46.000Z</published>
    <updated>2015-08-04T13:49:54.948Z</updated>
    <content type="html"><![CDATA[<p><strong>一张图搞定浏览器兼容性问题</strong></p>
<p><img src="/my-blog/images/ie.png" alt="">    </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>一张图搞定浏览器兼容性问题</strong></p>
<p><img src="/my-blog/images/ie.png" alt="">    </p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS3中REM的使用]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2015/01/12/CSS3%E4%B8%ADREM%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2015/01/12/CSS3中REM的使用/</id>
    <published>2015-01-12T06:31:46.000Z</published>
    <updated>2015-08-04T13:46:03.467Z</updated>
    <content type="html"><![CDATA[<p><strong>CSS3中REM的使用</strong></p>
<p>在页面中设置字体，我们一般用px，em或者是%。</p>
<p>px的用法我想大家都知道得了 ，就不废话了</p>
<h3 id="em">em</h3><p>&emsp;&emsp;一般都是以body的font-size为基准</p>
<pre><code><span class="tag">body</span> <span class="rules">{
    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">62.5%</span></span></span>;
    <span class="comment">/*10/16x100% = 62.5% */</span>
    }</span>
<span class="tag">h1</span> <span class="rules">{
    <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">2em</span></span></span>;
    }</span>
<span class="tag">p</span> <span class="rules">{ 
    <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">1.6em</span></span></span>;
    }</span>
</code></pre><p>&emsp;&emsp;以为用em一般要知道其父元素的font-size，所以还是比较麻烦的，相对于后面的rem。</p>
<h3 id="rem">rem</h3><p>&emsp;&emsp;w3c对于其的描述是“font size of the root element，即是相对于根元素的。</p>
<p>所以只要设置了body的font-size 就能相对于它来进行字体大小的设置了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>CSS3中REM的使用</strong></p>
<p>在页面中设置字体，我们一般用px，em或者是%。</p>
<p>px的用法我想大家都知道得了 ，就不废话了</p>
<h3 id="em">em</h3><p>&emsp;&emsp;一般都是以body]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[js 事件代理]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2014/12/24/js-%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2014/12/24/js-事件代理/</id>
    <published>2014-12-24T03:21:49.000Z</published>
    <updated>2015-08-03T02:47:26.573Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;如果你想给网页添加点JavaScript的交互性，也许你已经听过JavaScript的事件代理（event delegation），并且觉得这是那些发烧友级别的JavaScript程序员才会关心的什么费解的设计模式之一。事实上，如果你已经知道怎么添加JavaScript的事件处理器（event handler），实现事件代理也是件轻而易举的事情。</p>
<p>&emsp;&emsp;JavaScript事件是所有网页互动性的根基（我指的是真正的互动性，而不仅是那些CSS下拉菜单）。在传统的事件处理中，你按照需要为每一个元素添加或者是删除事件处理器。然而，事件处理器将有可能导致内存泄露或者是性能下降——你用得越多这种风险就越大。JavaScript事件代理则是一种简单的技巧，通过它你可以把事件处理器添加到一个父级元素上，这样就避免了把事件处理器添加到多个子级元素上。</p>
<h3 id="它如何运作">它如何运作</h3><p>&emsp;&emsp;事件代理用到了两个在JavaSciprt事件中常被忽略的特性：事件冒泡以及目标元素。当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。这一过程被称为事件冒泡；这个事件从原始元素开始一直冒泡到DOM树的最上层。任何一个事件的目标元素都是最开始的那个元素，在我们的这个例子中也就是按钮，并且它在我们的元素对象中以属性的形式出现。使用事件代理，我们可以把事件处理器添加到一个元素上，等待一个事件从它的子级元素里冒泡上来，并且可以得知这个事件是从哪个元素开始的。</p>
<h3 id="这对于开发有什么好处">这对于开发有什么好处</h3><p>&emsp;&emsp;想象一下现在我们有一个10列、100行的HTML表格，你希望在用户点击表格中的某一单元格的时候做点什么。比如说我有一次就需要让表格中的每一个单元格在被点击的时候变成可编辑状态。如果把事件处理器加到这1000个单元格会产生一个很大的性能问题，并且有可能导致内存泄露甚至是浏览器的崩溃。相反地，使用事件代理，你只需要把一个事件处理器添加到table元素上就可以了，这个函数可以把点击事件给截下来，并且判断出是哪个单元格被点击了。</p>
<h3 id="怎么用代码去实现">怎么用代码去实现</h3><p>&emsp;&emsp;代码很简单，我们所要关心的只是如何检测目标元素而已。比方说我们有一个table元素，ID是“report”，我们为这个表格添加一个事件处理器以调用editCell函数。editCell函数需要判断传到table来的事件的目标元素。考虑到我们要写的几个函数中都有可能用到这一功能，所以我们把它单独放到一个名为getEventTarget的函数中：</p>
<pre><code><span class="keyword">function</span> getEventTarget(<span class="literal">e</span>)｛
    <span class="literal">e</span> = <span class="literal">e</span> || window.event;
    <span class="keyword">return</span> <span class="literal">e</span>.target || <span class="literal">e</span>.srcElement;
}
</code></pre><p>&emsp;&emsp;e这个变量表示的是一个事件对象，我们只需要写一点点跨浏览器的代码来返回目标元素，在IE里目标元素放在srcElemnt属性中，而在其它浏览器里则是target属性。</p>
<p>&emsp;&emsp;接下来就是editCell函数了，这个函数调用到了getEventTarget函数。一旦我们得到了目标元素，剩下的事情就是看看它是否是我们所需要的那个元素了。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">editCell</span><span class="params">(e)</span> </span>{
    <span class="keyword">var</span> target = getEventTarget(e);
    <span class="keyword">if</span>(target.tagName.toLowerCase() == <span class="string">'td'</span>
        {
            <span class="comment">// do something with the cell</span>
        }
}
</code></pre><p>&emsp;&emsp;在editCell函数中，我们通过检查目标元素标签名称的方法来确定它是否是一个表格的单元格。这种检查也许过于简单了点；如果它是这个目标元素单元格里的另一个元素呢？我们需要为代码做一点小小的修改以便于其找出父级的td元素。如果说有些单元格不需要被编辑怎么办呢？此种情况下我们可以为那些不可编辑的单元格添加一个指定的样式名称，然后在把单元格变成可编辑状态之前先检查它是否不包含那个样式名称。选择总是多样化的，你只需找到适合你应用程序的那一种。</p>
<h3 id="优点与缺点">优点与缺点</h3><p>&emsp;&emsp;那些需要创建的以及驻留在内存中的事件处理器少了。这是很重要的一点，这样我们就提高了性能，并降低了崩溃的风险。<br>在DOM更新后无须重新绑定事件处理器了。如果你的页面是动态生成的，比如说通过Ajax，你不再需要在元素被载入或者卸载的时候来添加或者删除事件处理器了。<br>潜在的问题也许并不那么明显，但是一旦你注意到这些问题，你就可以轻松地避免它们：</p>
<p>&emsp;&emsp;你的事件管理代码有成为性能瓶颈的风险，所以尽量使它能够短小精悍。</p>
<p>&emsp;&emsp;不是所有的事件都能冒泡的。blur、focus、load和unload不能像其它事件一样冒泡。事实上blur和focus可以用事件捕获而非事件冒泡的方法获得（在IE之外的其它浏览器中）。<br>&emsp;&emsp;在管理鼠标事件的时候有些需要注意的地方。如果你的代码处理mousemove事件的话你遇上性能瓶颈的风险可就大了，因为mousemove事件触发非常频繁。而mouseout则因为其怪异的表现而变得很难用事件代理来管理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;如果你想给网页添加点JavaScript的交互性，也许你已经听过JavaScript的事件代理（event delegation），并且觉得这是那些发烧友级别的JavaScript程序员才会关心的什么费解的设计模式之一。事实上，如果你已经知道怎么添加]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery中如何实现标签切换效果]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2014/12/14/tab/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2014/12/14/tab/</id>
    <published>2014-12-14T05:21:29.000Z</published>
    <updated>2015-08-03T02:08:42.580Z</updated>
    <content type="html"><![CDATA[<p>核心代码：</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>tab<span class="tag">&lt;/<span class="title">title</span>&gt;</span>

<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"tab"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"active"</span> <span class="attribute">data-title</span>=<span class="value">"d1"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">data-title</span>=<span class="value">"d2"</span>&gt;</span>2<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">data-title</span>=<span class="value">"d3"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"d1"</span>&gt;</span>1111<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"d2"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>2222<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"d3"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>3333<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"d4"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>4444<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>    
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
    $(<span class="string">'ul &gt; li'</span>).click(tab);
    <span class="function"><span class="keyword">function</span> <span class="title">tab</span>(<span class="params"></span>) </span>{
        $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);
        <span class="keyword">var</span> tab = $(<span class="keyword">this</span>).attr(<span class="string">'title'</span>);
        $(<span class="string">'#'</span>+tab).show().siblings().hide();
    }
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>核心代码：</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span> <span class]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS字体中英文名称对照表 CSS常用中文字体英文名称对照表]]></title>
    <link href="http://gin280.github.io/my-blog/my-blog/2014/11/24/font/"/>
    <id>http://gin280.github.io/my-blog/my-blog/2014/11/24/font/</id>
    <published>2014-11-24T06:31:49.000Z</published>
    <updated>2015-08-03T03:19:51.624Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;在CSS文件中，我们常看到有些字体名称变成了乱码，这是由于编写者将中文字体的名字直接写成了中文，并且再上传或者拷贝复制的时候无意间变成了乱码。 为了避免这种状况出现，在CSS文件中使用中文字体时，最好使用中文字体的英文名称，我们常用中文字体的英文名称对照表如下： Windows自带的字体：</p>
<p><img src="/my-blog/images/font.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;在CSS文件中，我们常看到有些字体名称变成了乱码，这是由于编写者将中文字体的名字直接写成了中文，并且再上传或者拷贝复制的时候无意间变成了乱码。 为了避免这种状况出现，在CSS文件中使用中文字体时，最好使用中文字体的英文名称，我们常用中文字体的英文名称]]>
    </summary>
    
  </entry>
  
</feed>